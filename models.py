# reports/models.py

from django.db import models
from django.contrib.auth import get_user_model

from organization.models.organization import Organization
from facility.models.facility import Facility
from faction.models.faction import Faction

User = get_user_model()


class ReportTemplate(models.Model):
    """
    Stores predefined or custom report templates.
    """

    name = models.CharField(max_length=255)
    description = models.TextField(blank=True, null=True)
    query = models.TextField(help_text="SQL query or ORM logic to fetch data.")
    filters = models.JSONField(
        default=dict, blank=True, help_text="Available filters for the report."
    )
    is_custom = models.BooleanField(default=False)
    created_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True
    )
    organization = models.ForeignKey(
        Organization, on_delete=models.CASCADE, null=True, blank=True
    )
    facility = models.ForeignKey(
        Facility, on_delete=models.CASCADE, null=True, blank=True
    )
    faction = models.ForeignKey(
        Faction, on_delete=models.CASCADE, null=True, blank=True
    )
    allowed_user_types = models.JSONField(
        default=list, help_text="List of allowed user types."
    )
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name


class GeneratedReport(models.Model):
    """
    Tracks generated reports, storing the output and its metadata.
    """

    name = models.CharField(max_length=255)
    template = models.ForeignKey(ReportTemplate, on_delete=models.CASCADE)
    generated_by = models.ForeignKey(
        User, on_delete=models.SET_NULL, null=True, blank=True
    )
    filters_applied = models.JSONField(default=dict)
    output_file = models.FileField(upload_to="reports/generated/")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.name} (Generated by {self.generated_by})"
