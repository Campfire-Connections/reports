# reports/models.py

from django.db import models
from django.contrib.auth import get_user_model


User = get_user_model()


class ReportTemplate(models.Model):
    """Model to define report templates that users can customize."""

    name = models.CharField(max_length=255, help_text="Name of the report")
    description = models.TextField(
        blank=True, help_text="Detailed description of the report"
    )
    created_by = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="created_reports"
    )
    available_to = models.ManyToManyField(
        User,
        blank=True,
        related_name="accessible_reports",
        help_text="Users who have access to this report",
    )
    filters = models.JSONField(
        blank=True, null=True, help_text="Filter options for this report in JSON format"
    )
    query = models.TextField(
        blank=True, help_text="SQL-like query or instructions for generating the report"
    )
    output_formats = models.JSONField(
        default=list,
        help_text="Allowed output formats for the report (e.g., ['csv', 'pdf', 'excel'])",
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    def is_accessible_by(self, user):
        """Check if the user has access to this report."""
        return self.created_by == user or user in self.available_to.all()


class GeneratedReport(models.Model):
    """Model to store generated reports and their metadata."""

    name = models.CharField(max_length=255)
    template = models.ForeignKey(
        ReportTemplate, on_delete=models.CASCADE, related_name="generated_reports"
    )
    generated_by = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="generated_reports"
    )
    filters_applied = models.JSONField(blank=True, null=True)
    output_file = models.FileField(upload_to="reports/generated/")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Report: {self.name} (Generated by: {self.generated_by.username})"
